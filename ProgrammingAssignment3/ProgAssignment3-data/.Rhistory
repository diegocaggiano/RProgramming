my_data
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6<7
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE).
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints<- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div=2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hola amigos mios", "Esta conversacion es publica")
submit()
mad_libs("Uruguay", "horroroso", "enano")
submit()
"I"%p%"love"%p%"R!"
quit()
library("swirl")
source('C:/Data_Science/RProgramming/pollutantmean.R')
submit()
submit()
submit()
?submit
rm(ls())
rm(list=ls())
swirl()
quit()
rm(list=ls())
library("swirl")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes<-flags(, 19:23)
flag_shapes<-flags[, 19:23]
lapply(flag_shapes, range)
shape_mat<- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals<-lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
quit()
library(datasets)
data(iris)
?iris
iris
vir<- iris(,Species="virginica")
vir<- iris[,Species="virginica"]
vir<- iris[,Species=="virginica"]
vir<- iris[,"Species"=="virginica"]
vir
rm(vir)
vir
vir<- iris[,5]
vir
rm(vir)
vir_b<- iris[,5=="virginica"]
vir_b
rm(vir_b)
vir
vir_b
media<- lapply(iris(,1), mean)
media<- lapply(iris[,1], mean)
media
View(flags)
View(flag_shapes)
iris
iris[,1]
mean(iris[,1])
View(iris)
y<- iris[1,Species=="setosa"]
y<- iris[,"Species"=="setosa"]
y
dim(y)
y
rm(y)
y<- iris[1:5, 5:5]
y
y<- iris[,5]
y
library("swirl")
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
iris
v_b<- iris[,5] == 'virginica'
v_b
iris2<-iris[v_b,]
iris2
mean(iris2[,1])
m<-mean(iris2[,1])
round(m,0)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
data(mtcarts)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
mtcars
View(mtcars)
4c_b<- mtcars[,cyl==4]
cyl4_b<- mtcars[,cyl==4]
cyl4_b<- mtcars[,"cyl"==4]
cyl4_b
rm(cyl4_b)
cyl4_b<-mtcars[,2]==4
cyl4_b
mtcars4c<-mtcars[cyl4_b,]
mtcars4c
mean4c<-mean(mtcars4c[,hp])
mean4c<-mean(mtcars4c[,"hp"])
mean4c
cyl8_b<-mtcars[,2]==8
mtcars8c<-mtcars[cyl8_b,]
mtcars8c
mean8c<-mean(mtcars8c[,"hp"])
means8c
mean8c
mean4c
abs(mean4c-mean8c)
abs(mean8c-mean4c)
round(abs(mean8c-mean4c),0)
debug(ls)
ls()
5
exit
exit()
0
quit()
nxt()
bye()
quit()
undebug(ls)
Quote()
undebug(ls)
quit()
quit()
m<- matrix(1:9, 3, 3)
m
minv<-solve(m)
minv<-solve(m, LINPACK=FALSE)
m<- matrix(2:10, 3, 3)
m
minv<-solve(m, LINPACK=FALSE)
sample(9)
m<- matrix(sample(9), 3, 3)
minv<-solve(m, LINPACK=FALSE)
minv
lm
search()
m<- matrix(sample(600), 60, 10)
dim(m)
minv<- solve(m)
m<- matrix(sample(3600), 60, 60)
minv<- solve(m)
minv
m = matrix()
m
dim(m)
v = numeric()
v
m = [numeric(), numeric()]
m <-[numeric(), numeric()]
m<- matrix(numeric(0), numeric(0))
m<- matrix(numeric(), numeric())
x<- numeric()
x
length(x)
n<-matrix(numeric(), 0,0)
n
dim(n)
nrow(n)
ncol(n)
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
makeCacheMatrix(matrix[sample(25), 5, 5])
makeCacheMatrix(matrix[sample(25), 5, 5])
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
m
mt<- matrix(sample(900), 30, 30)
head(mt)
cache_inverse_matrix(mt)
special_matrix<- makeCacheMatrix(mt)
cache_inverse_matrix(special_matrix)
res<-cache_inverse_matrix(special_matrix)
res<-cache_inverse_matrix(special_matrix)
res<-cache_inverse_matrix(special_matrix)
res<-cache_inverse_matrix(special_matrix)
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
rm(list=ls())
matriz<- matrix(sample(1600), 400, 400)
special_matriz<- makeCacheMatrix(matriz)
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
special_matriz<- makeCacheMatrix(matriz)
res<- cache_inverse_matrix(special_matriz)
matriz<- matrix(sample(1600), 400, 400)
special_matriz<- makeCacheMatrix(matriz)
res<- cache_inverse_matrix(special_matriz)
matriz<- matrix(sample(10000), 100, 100)
special_matriz<- makeCacheMatrix(matriz)
res<- cache_inverse_matrix(special_matriz)
res
res<- cache_inverse_matrix(special_matriz)
res
res<- cache_inverse_matrix(special_matriz)
res<- cache_inverse_matrix(special_matriz)
matriz<- matrix(sample(4), 2, 2)
special_matriz<- makeCacheMatrix(matriz)
res<- cache_inverse_matrix(special_matriz)
res
matriz %*% res
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
special_matriz<- makeCacheMatrix()
res<- cache_inverse_matrix(special_matriz)
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
matriz<- matrix(sample(25000), 500, 500)
matriz_especial<- makeCacheMatrix(matriz)
resultado<-cacheSolve(matriz_especial)
matriz<- matrix(sample(250000), 500, 500)
matriz_especial<- makeCacheMatrix(matriz)
resultado<-cacheSolve(matriz_especial)
dim(resultado)
resultado<-cacheSolve(matriz_especial)
resultado<-cacheSolve(matriz_especial)
resultado<-cacheSolve(matriz_especial)
comprobacion<- resultado %*% matriz
comprobacion
matriz<- matrix(sample(9), 3, 3)
matriz
matriz_especial<- makeCacheMatrix(matriz)
resultado<-cacheSolve(matriz_especial)
resultado<-cacheSolve(matriz_especial)
resultado
comprobacion<- matriz %*% resultado
comprobacion
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
matriz<- matrix(sample(9), 3, 3)
matriz
matriz_especial<- makeCacheMatrix(matriz)
resultado<-cacheSolve(matriz_especial)
resultado
comprobacion<- matriz %*% resultado
View(comprobacion)
source('C:/Data_Science/RProgramming/Matrix_Invertion.R')
comprobacion<- matriz %*% resultado
quit()
source('C:/Data_Science/RProgramming/Matrix_Inversion.R')
source('C:/Data_Science/RProgramming/Matrix_Inversion.R')
matriz<-matrix(sample(100), 10, 10)
matriz_especial<- makeCacheMatrix(matriz)
matriz
matriz_especial
cacheSolve(matriz_especial)
resultado<-cacheSolve(matriz_especial)
resultado<-cacheSolve(matriz_especial)
resultado<-cacheSolve(matriz_especial)
matriz<-matrix(sample(400), 20, 20)
resultado<-cacheSolve(matriz_especial)
matriz_especial<- makeCacheMatrix(matriz)
resultado<-cacheSolve(matriz_especial)
resultado
resultado<-cacheSolve(matriz_especial)
resultado<-cacheSolve(matriz_especial)
prueba<- matriz %*% resultado
prueba
source('C:/Data_Science/RProgramming/Matrix_Inversion.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment2/cachematrix.R')
quit()
quit()
source('C:/Data_Science/RProgramming/ProgrammingAssignment2/cachematrix.R')
rm(list=ls())
matriz
matriz<-matrix(sample(49), 7, 7)
matriz_especial<-makeCacheMatrix(matriz)
source('C:/Data_Science/RProgramming/ProgrammingAssignment2/cachematrix.R')
matriz_especial<-makeCacheMatrix(matriz)
resultado<- cacheSolve(matriz_especial)
View(resultado)
resultado<- cacheSolve(matriz_especial)
View(resultado)
resultado<- cacheSolve(matriz_especial)
prueba<- resultado %*% matriz
View(prueba)
source('C:/Data_Science/RProgramming/ProgrammingAssignment2/cachematrix.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment2/cachematrix.R')
matriz<-matrix(sample(64), 8, 8)
matriz_especial<-makeCacheMatrix(matriz)
resultado<- cacheSolve(matriz_especial)
resultado<- cacheSolve(matriz_especial)
prueba<- resultado %*% matriz
View(prueba)
quit()
vector<- c(1,2,3,4,5)
str(vector)
vector<- c(1,2,3,4,9)
str(vector)
str(str)
str(lm)
str(mean)
function(cbind)
quit
str(cbind)
y<-c(sample(100), 1:100)
y
str(y)
quit()
quit()
set.seed(1)
rpois(5,2)
set.seed(10)
rpois(5,2)
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
e
y <- 0.5 + 2 * x + e
y
include("swirl")
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tails(plants, 15)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace=TRUE)
sample(1:6, 4, replace=TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2<-rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm<- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(y=cars$speed, x=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stoppong Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stoppong Distance")
plot(x=cars$speed, y=cars$dist,  ylab="Stoppong Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab= "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, main=My Plot")
plot(x = cars$speed, y = cars$dist, main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl, mtcars)
hist(mtcars$mpg)
quit()
setwd("C:/Data_Science/RProgramming/ProgrammingAssignment3/ProgAssignment3-data")
dir()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
str(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
outcome
head(outcome)
head(outcome,2)
outcome(,c(1,11))
outcome [,c(1,11)]
head(outcome [,c(1,11)],5)
getwd()
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
setwd("C:/Data_Science/RProgramming/ProgrammingAssignment3/ProgAssignment3-data")
best
best("NY", "PP")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("NY", "PP")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("NY", "PP")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("NY", "PP")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
best("NY", "PP")
source('C:/Data_Science/RProgramming/ProgrammingAssignment3/best.R')
quit()
